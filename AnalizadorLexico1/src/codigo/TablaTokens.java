/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

/**
 *
 * @author Eduardo
 */
public class TablaTokens extends javax.swing.JFrame {

    /**
     * Creates new form TablaTokens
     */
    public TablaTokens() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {"Reservada", "C", "Palabra reservada para declarar una variable de tipo caracter."},
                {"Reservada", "CAD", "Palabra reservada para declarar una variable de tipo cadena."},
                {"Reservada", "SZ", "Palabra reservada para declarar una variable de small int."},
                {"Reservada", "Z", "Palabra reservada para declarar una variable de tipo entera."},
                {"Reservada", "R", "Palabra reservada para para declarar una variable de tipo real"},
                {"Reservada", "Q", "Palabra reservada para para declarar una variable de tipo float."},
                {"Reservada", "D", "Palabra reservada para declarar una variable de tipo double."},
                {"Reservada", "VOF", "Palabra reservada para declarar una variable de tipo boolean."},
                {"Reservada", "Cond", "Palabra reservada para colocar un if."},
                {"Reservada", "Conds", "Palabra reservada para colocar un else"},
                {"Reservada", "Mientras", "Palabra reservada para un while"},
                {"Reservada", "Ciclar", "Palabra reservada para un for"},
                {"Reservada", "Hacer", "Palabra reservada para un do while"},
                {"Reservada", "Este", "Palabra reservada para referenciar al objeto al apuntar."},
                {"Reservada", "Devolver", "Palabra reservada para retornar un objeto, función o método."},
                {"Reservada", "CHANGE", "Palabra reservada para declarar un switch."},
                {"Reservada", "v", "Palabra reservada  declarar un valor de tipo verdadero."},
                {"Reservada", "f", "Palabra reservada para declarar un valor de tipo falso."},
                {"Reservada", "ROMPER", "Palabra reservada para romper o cortar un proceso."},
                {"Reservada", "PU", "Palabra para declarar una clase o objeto de tipo público."},
                {"Reservada", "PR", "Palabra reserervada pra declarar una clase objeto de tipo privado"},
                {"Reservada", "PAQUETE", "Palabra reservada para declarar una clase."},
                {"Reservada", "OPCION", "Palabra que se coloca dentro de un switch para definir diferentes casos."},
                {"Reservada", "PRO", "Palabra reservada para declarar una clase o objeto de tipo protegido."},
                {"Reservada", "nuevo", "Palabra reservada para declarar un nuevo objeto."},
                {"Operador aritmético", "MAS", "Palabra reservada para el operador aritmético mas."},
                {"Operador aritmético", "MENOS", "Palabra reservada para el operador aritmético menos."},
                {"Operador aritmético", "POR ", "Palabra reservada para el operador aritmético por."},
                {"Operador aritmético", "ENTRE", "Palabra reservada para el operador aritmético entre."},
                {"Operador aritmético", "MAS1", "Palabra reservada para el operador aritmético de incremento ++."},
                {"Operador aritmético", "MENOS1", "Palabra reservada para el operador aritmético de incremento ++."},
                {"Marcas de bloque", "<(", "Llave para abrir"},
                {"Marcas de bloque", ")>", "Llave para cerrar"},
                {"Operador lógico", "Y", "Palabra reservada para el operador lógico &&."},
                {"Operador lógico", "O", "Palabra reservada para el operador lógico O."},
                {"Operador lógico", "DIF", "Palabra reservada para el operador lógico !"},
                {"Operador de comparación", "EQU", "Palabra reservada para el operador de comparación igual."},
                {"Operador de comparación", "MEN", "Palabra reservada para el operador de comparación menor."},
                {"Operador de comparación", "MAY", "Palabra reservada para el operador de comparación mayor."},
                {"Signosde puntuación", "!!", "Palabra reservada para declarar el fin de una linea, equivalente al punto  y coma."},
                {"Constante", "BLANCO", "COLOR"},
                {"Constante", "GRISCLARO", "COLOR"},
                {"Constante", "GRIS", "COLOR"},
                {"Constante", "NEGRO", "COLOR"},
                {"Constante", "ROJO", "COLOR"},
                {"Constante", "ROSA", "COLOR"},
                {"Constante", "NARANJA", "COLOR"},
                {"Constante", "AMARILLO", "COLOR"},
                {"Constante", "VERDE", "COLOR"},
                {"Constante", "FUSCIA", "COLOR"},
                {"Constante", "AZULTURQ", "COLOR"},
                {"Constante", "AZUL", null}
            },
            new String [] {
                "Componente Léxico", "Lexema", "Descripción del patrón"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablaTokens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablaTokens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablaTokens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablaTokens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TablaTokens().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
